we can take advantage of R's built in http server. see src/modules/internet/Rhttpd.c

this server is started with tools::startDynamicHelp

by default this will handle all requests through tools:::httpd

however we can define custom handlers and assign them to the
tools:::.httpd.handlers.env environment and in this way make them
available to R's http server

if the url path begins with /custom/<name>/, R will lookup the
custom handler given by <name> in the .httpd.handlers.env
and it will evaluate it (with the request data) in the tools namespace.
note that <name> must be less than 64 characters long. of course it must
also be a closure (function).

tools:::httpd provides a reference implementation for how to write a
custom handler


each handler has the signature
    function(path, query, body, headers)

path is the url path

query will be:
    - a named character vector representing the query string. the names will
      be the query parameters and the items will be the values.
body will be either:
    - a NULL
    - a named character vector representing the query string (in the event
      that the body is a url-encoded form)
    - a RAWSXP with the body content, possibly with the attribute "content-type"
headers will be either:
    - a NULL
    - a RAWSXP with the header content

tools:::httpd only uses path and query args




implement a handler db.httpd that works like wapp
in other words, db.httpd does some introspection
on the path url to identify the the database name
and the url path head. it then dispatches to
a custom handler based on that head name, passing that
custom handler the database connection, the query params,
body, and header. each handler responds, db.httpd receives
the response and transforms it into the response expected
by R's http server. so would need to implement some standard
rules about how to respond. if there's no handler for the
head name it will error. we'll know about handlers and where
they are located because of the Rdb_help table in the database


db.open should attach the functions that implement the help
system as attributes to db.http. after they are attached
it should then assign db.http into the .httpd.handlers.env
environment under the name of the database file being opened.






or rather, a dbpkg is an R package that implements at least one of
    - one or more virtual table modules
    - one or more user-defined sql functions
    - one or more documentation web pages

in other words, a dbpkg defines and operates on a set of sql schema stored
in a sqlite database. a single sqlite database can inherit more than one
dbpkg schema, or can inherit a subset of a single dbpkg schema.

when db.open is called the argument dbpkg=list() is checked, which lists
the set of dbpkg's the database being connected to inherits. it also checks
the database for a 'dbpkg' table, and uses the entries in that table to load
the appropriate R packages (taking the union of the arg and the table entries).

each dbpkg needs to define three entrypoints:
    dbpkg::views should return a named list of functions, one of the names
    must be 'default'. each name corresponds to the HEAD of a URL (i.e.,
    /custom/db.name/HEAD/tail), and when a url with that HEAD is requested the
    function will be called to render the page's content. The 'default' function
    is called when there is no HEAD (i.e. /custom/db.name/). Each function
    will receive 2 arguments: the database connection and the http request data

    dbpkg::modules should return a named list of functions that were made by a call
    to db::new.virtualtable. each name is the name of the virtual table module
    and the function will be called to register the module with the database.

    dbpkg::functions should return a named list of functions. each name is the name
    of a user-defined sql function and the function is the udf that will be
    called when that name appears in a sql statement.





