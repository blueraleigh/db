% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db-eval.R
\name{db.eval}
\alias{db.eval}
\title{Evaluate SQL statements}
\usage{
db.eval(db, stmt, params)
}
\arguments{
\item{db}{The database connection. An S4 object of class "database".}

\item{stmt}{The SQL statement to evaluate. SQL parameters can be
bound to the statement and are indicated by the '?' character.}

\item{params}{A matrix, data.frame, or list of lists with parameters
to bind the SQL stmt. Each row in the matrix or data.frame or each
sublist in the list of lists corresponds to a single parameter set.
The number of parameters in each parameter set should equal the
number of '?' characters in the SQL statement. If multiple parameter
sets are bound to the statement then the statement may not be a
SELECT statement.}
}
\value{
A cursor to retrieve the results of a SELECT statement or
(invisibly) NULL if the statement is not a SELECT.
}
\description{
Evaluate SQL statements
}
\examples{
db = db.open()
db.eval(db, "CREATE TABLE foo(f1 TEXT)")
db.eval(db, "INSERT INTO foo VALUES (?)", list(list("hello")))
db.eval(db, "INSERT INTO foo VALUES (?)", data.frame(letters))
db.eval(db, "INSERT INTO foo VALUES (?)", matrix("goodbye", 1, 1))
cursor = db.eval(db, "SELECT * FROM foo")
db.fetchall(cursor)          # return a matrix
db.fetchall(cursor, TRUE)    # return a data.frame
db.fetch(cursor)             # return one result row
db.fetchall(cursor, TRUE)    # note that the first row is missing!
db.fetchall(cursor, TRUE)    # okay, now it is back
db.close(db)
}
\seealso{
\code{\link{db.fetch}} \code{\link{db.fetchall}}
}
